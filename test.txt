时间IO 磁盘IO 网络IO 自定义事件 --event loop触发
1、当前进程空闲
2、触发条件


Object.prototype 产生的是{}
Function.prototype 产生的是function(){}
Function.prototype.isPrototypeOf(Object)

Function=new Object();
Function.prototype=new Object();

Object.prototype.isPrototypeOf(Function);
Object.prototype.isPrototypeOf(Function.prototype);

Content-type ---http协议 MIME头  RFC文档
实体头：Allow、Content-type、Content-base、Content-Encoding、Content-language
Content-length
type：plain、text、multipart、Application、Message、Image、Audio、Video

supervisor  nodemon  pm2
cls clear
npm cnpm  
cnpm install -g mysql
npm install -g mysql


node -v  查看node版本
n  查看和切换node版本  

全局安装  cnpm install -g 包名  
本地安装  cnpm install 包名    //当前项目文件夹下  node_modules mysql文件见

npm install -g cnpm  
npm install -g n
cnpm install -g n 
cnpm install -g supervisor 

1、写一个简单的webServer  讲解基础知识（mime 端口 type）、如何调试
2、如何使用npm cnpm  进行本地安装 全局安装node的第三方包 Function Object关系
3、如何写异步代码  讲解异步代码两个关键点  当前进程空闲 达到触发条件（时间IO、磁盘IO、网络IO、自定义事件）
4、如何将异步代码转变成同步代码
5、回调函数callback（同步和异步两种）--处理时间IO
6、处理磁盘IO(fs.readFile  fs.readFileSync)
7、处理网络IO(http.get),处理域名(DNS) 如何使用Nodejs将域名(www.qq.com)转换成IP(IPV4 IPV6)
8、读取静态资源的方式（html jpeg css js）----静态资源管理器
9、用Node原生处理Get Post  $_GET $_POST
10、处理单一路由(if  else if  else)  多地址路由(switch case)
11、把一个文件的代码分离到多个文件去(module.exports  exports)
    exports.键名={}/function   module.exports=[]/{}/function class
12、入口文件index.js(加载公开模块 静态资源管理器、加载入口路由、加载全局变量、加载全局方法 use\set)
    -->路由文件routers.js(静态路由、动态路由)-->控制器方法(业务逻辑都要写在controller.js)
13、项目开发采用github做代码管理，内部项目采用gitlab做代码管理 cvs/svn  --Linux CI/CD jenkis
14、写静态资源管理器(静态资源是单独发起进程传输了 需要浏览器单独解码才可以显示)
以上我们讲的都是面向过程+node原生基础
--------------------------------
15、面向对象（ES6～～ES10）、ES5  继承 封装 多态   
（1）子类要能获取到夫类的成员属性、成员方法（public、protect）  extends  es5:call、apply、callee
（2）构造函数--子类的构造函数拿到父类的构造函数  php:__constructor  java:super    es5:prototype  nodejs:inherit  
es5  string\array\function\math--->object   nodejs  fs\http\stream\global--->events
call、apply、callee---inherits
16、npm 包管理系统  Linux&Unix Unix BSD（freebsd netbsd openbsd） Linux（debian redhat）
debian ubuntu  redhat centos fedora 
windows安装 exe  Linux rpm 缺少各种依赖 gcc.rpm redhat redflag
debian第一版  apt-get install rar ubuntu centos yum install rar
OS包管理系统  语言（Python安装很多类库pip）NodeJS npm 

npm install -g cnpm    //global  node安装目录/node_modules
npm install -g pm2
npm install forever    //将forever包安装在当前项目下的node_modules
npm install -g cnpm    //taobao镜像
headers.tar.gz    //windows zip rar Linux zip tar gz bz2
cnpm install morgan --save
npm uninstall forever
npm ls forever
17、手动建立自定义包  package  npm/cnpm init
var Animal=require("./Animal.js");
var morgan=require("morgan");
(1)加载morgan.js   (2)morgan/index.js
cnpm install morgan --save  package.json
cnpm install morgna --dev   package.json

18、Express  Node下MVC框架 Controller View Model
（1）项目多人合作 把视图分离、功能模块分离 提高项目的效率
（2）开发路径明晰
（3）可以跨团队开发
（4）采用前后端分离方式 JS原生、JQuery类库、前端框架（MVVM Vue）

19、MVC模型各是做什么的
（1）Controller 控制器用来做业务逻辑：注册登录、密码加密、密码找回、发布博客等等
（2）Model 用来处理数据模型 CRUD T-SQL操作 Insert Update Delete Select
（3）View  用来做页面显示 模版文件（HTML、ejs、jade、template）

20、入口文件和路由文件是做什么的
（1）入口文件 index.js app.js 功能用来加载系统模块、第三方模块、加载全局函数和全局变量
            容错处理、异常处理
（2）路由文件 router.js 加载控制器 加载一些多参数  通过地址去访问控制器
（3）中间件 上传功能：formidable request socket.io 

21、Express应用和Express文档 构建Express脚手架全过程
1、https://www.expressjs.com.cn/
2、创建原生的Express
$ mkdir myapp    //创建文件夹 项目名
$ cd myapp       //进入项目文件夹
$ npm init     ---文件夹中创建一个package.json   entry point:app.js
$ npm install -g express  //没有办法全局访问到express  4.0版本之前
$ npm install -g express-generator //express脚手架全局可用 npx express-generator
$ express -e myapp   // -e  用express框架来安装ejs模版包
$ npm install -g cnpm   //阿里巴巴做了一个npm的镜像 cnpm
$ cnpm install -g express@3.6.0  //用@符号来安装指定版本
$ npm install -g express@3.6.0

22、使用Express构建项目脚手架
1、Express -e myapp   express --view=ejs myapp 
   express --view=pug myapp // express --view=jade myapp
2、cnpm install   //安装了开发依赖包  node_modules 
3、cnpm install -g   //全局安装 node安装目录下的node_modules
4、node ./bin/www    //执行项目  windows 1.txt demo.exe 2.jpg m.ini
   文件系统 文件结构 windows NE/LE/PE  Mac dmg/Linux ELF

/bin        ---就是启动Express框架
/node_modules  ---安装存放系统框架所需的第三方模块或者中间件
/public     ---用来存放静态资源 上传的文件 静态交互文件
/routes     ---用来做路由文件的  switch--case 
        var/const routers=require("./routes")  
        routes.js routes/index.js  var users=require("./routes/users.js")
/views      ---用来存放静态模版文件  index.ejs
app.js      ---Express框架入口文件
package.json  ---用来记录安装包依赖

node ./bin/www-->app.js-->routes/index.js(控制器-路由文件)-->views/index.ejs

var server = http.createServer(app)
var server = http.createServer(function(req,res){})

http-errors：用来处理http错误的模块
express：用来处理web框架的
path：用来处理路径 path.join()拼接两个路径 处理静态资源管理器路径
cookie-parser：处理cookie问题 处理一些post数据的问题
morgan：处理webserver日志及所有日志回显

app.set('views', path.join(__dirname, 'views'));
//Views的路径处理
app.set('view engine', 'ejs');
//模版的解析处理

logger('dev'));   //记录系统日志
express.json());  //用来接写body的内容 req.body.key=value
express.urlencoded({ extended: false }));  //url解码
cookieParser());  //解析cookie
express.static(path.join(__dirname, 'public'))); //express静态资源管理器



